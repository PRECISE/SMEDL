a. Major bugs

no default statement after each case 

b. Minor bugs

  1) In SMEDL file, if we have move_count = move_count +1, generated code is 
    monitor->move_count = this.move_count + 1 where "this." needs to be "monitor->"

  2) if the state variable is the same name as attribute name, how to distinct them?

In the current implementation, the attribute name will overwrite the state variable
mon_heading is the name of state variable and attribute of event. In SMEDL, the update statement is mon_heading= mon_heading + 1, then it will generate:

    monitor->mon_var_mon_heading = this.mon_var_mon_heading + 1;

Note that in SMEDL specification, if we change "mon_heading= mon_heading + "1 to 

 "mon_heading=this.mon_heading + 1", we will get the same result.

  3) pointer type in SMEDL will directly change to "pointer" in the "raise_xxx" method

  4) "import" is not supported by the compiler

  5) monitor_map.c: no case for "OPAQUE"



c. Other implementation issues

1)action queue has not been implemented

2)raise statement has not been implemented

3)event triggered by predicates on state variables(if needed or not)

4)equivalence between formal semantics and compiler implementation

5)consistency checking

6)new operator "pre"

7)asynchronous communication


