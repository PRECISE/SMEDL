We have developed a toolchain which enables a user to produce C source code from SMEDL definitions. Our efforts to develop the toolchain included designing an EBNF grammar to describe SMEDL, generating a SMEDL parser using a parser generator tool, and developing a translator to produce C source code from parsed SMEDL input. Each component in the toolchain uses as its input the output of the previous component in the chain, allowing us to build an integrated tool which performs the end-to-end transformation with a single command.

The Grako parser generator tool was chosen to help reduce the effort spent developing a fast, efficient SMEDL parser. This open-source Python tool accepts EBNF grammars as input and outputs Packrat PEG parsers. The generated parsers, which are written in Python, take two parameters as input: a file to be parsed and a starting rule from the grammar. Internally, a parse function is called and returns an AST which is printed to the screen. Rather than just executing the parser script from the command-line, we are also able to directly interact with the parser through an instance of the Parser class and manipulate the AST data structure in memory. This flexibility became very useful when developing our SMEDL-to-C translator.

The translator uses the generated Parser class for its initial step of parsing an input SMEDL file to produce an AST. It further analyzes this AST to build a symbol table of the relevant identifiers and a state machine to describe the scenario state transitions. Its final step writes out valid C syntax through the combined use of its symbol table and state machine.

An example SMEDL definition, below, shows how a checker might be defined such that the specified property could be checked. The following C code was produced by our toolchain, using the shown SMEDL definition as the input. The code includes an enum which captures each state found in the SMEDL scenarios section, a struct to hold the checker’s state, and several functions each consisting of a switch statement used to implement the proper scenario state transitions as described by the translator’s state machine.

————————————————

(* property checked: whenever we reach the boundary, a change of direction will happen before the next update *)

object SafeMon
identity
  opaque id;
state
  int upbound, lobound;
events
  imported updatePos(int), changeDir;
scenarios
  sc1:
    SafeMon -> updatePos(pos) when pos == upbound || pos == lobound -> Switch
    Switch -> changeDir() -> SafeMon
    SafeMon -> changeDir() -> SafeMon

————————————————

enum { SWITCH, SAFEMON } stateset;

struct Checker {
  int upbound;
  int lobound;
  int currentState;
} Checker;

void changeDir(Checker* c) {
  switch (c->currentState) {
    case SWITCH:
      c->currentState = SAFEMON;
      break;
    case SAFEMON:
      c->currentState = SAFEMON;
      break;
}

void updatePos(Checker* c, int pos) {
  switch (c->currentState) {
    case SAFEMON:
      if (c->upbound == pos || c->lobound == pos) {
        c->currentState = SWITCH;
      }
      break;
}