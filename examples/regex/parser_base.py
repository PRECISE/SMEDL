#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# CAVEAT UTILITOR
# This file was automatically generated by Grako.
#    https://bitbucket.org/apalala/grako/
# Any changes you make to it will be overwritten the
# next time the file is generated.
#

from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import *  # noqa
from grako.exceptions import *  # noqa


__version__ = '14.164.16.49.25'


class RegexParser(Parser):
    def __init__(self, whitespace=None, **kwargs):
        super(RegexParser, self).__init__(whitespace=whitespace, **kwargs)

    @rule_def
    def _START_(self):
        self._EXPRE_()
        self._check_eof()

    @rule_def
    def _EXPRE_(self):
        with self._choice():
            with self._option():
                self._CHOICE_()
            with self._option():
                self._SEQUENCE_()
            self._error('no available options')

    @rule_def
    def _CHOICE_(self):
        self._SEQUENCE_()
        self.ast.add_list('opts', self.last_node)

        def block1():
            self._token('|')
            self._cut()
            self._SEQUENCE_()
            self.ast.add_list('opts', self.last_node)
        self._positive_closure(block1)

    @rule_def
    def _SEQUENCE_(self):

        def block1():
            self._TERM_()
        self._positive_closure(block1)

        self.ast['terms'] = self.last_node

    @rule_def
    def _TERM_(self):
        with self._choice():
            with self._option():
                self._CLOSURE_()
            with self._option():
                self._ATOM_()
            self._error('no available options')

    @rule_def
    def _CLOSURE_(self):
        self._ATOM_()
        self.ast['@'] = self.last_node
        self._token('*')
        self._cut()

    @rule_def
    def _ATOM_(self):
        with self._choice():
            with self._option():
                self._SUBEXP_()
            with self._option():
                self._LITERAL_()
            self._error('no available options')

    @rule_def
    def _SUBEXP_(self):
        self._token('(')
        self._cut()
        self._EXPRE_()
        self.ast['@'] = self.last_node
        self._token(')')

    @rule_def
    def _LITERAL_(self):
        self._pattern(r'(?:\\.|[^|*\\()])+')


class RegexSemanticParser(CheckSemanticsMixin, RegexParser):
    pass


class RegexSemantics(object):
    def START(self, ast):
        return ast

    def EXPRE(self, ast):
        return ast

    def CHOICE(self, ast):
        return ast

    def SEQUENCE(self, ast):
        return ast

    def TERM(self, ast):
        return ast

    def CLOSURE(self, ast):
        return ast

    def ATOM(self, ast):
        return ast

    def SUBEXP(self, ast):
        return ast

    def LITERAL(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = RegexParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in RegexParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for Regex.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace, whitespace=args.whitespace)