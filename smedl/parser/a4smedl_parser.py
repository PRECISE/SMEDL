#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import generator_stop

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class A4SMEDLBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re='(\\/\\*([^*]|[*\\r\\n])*\\*\\/)|(\\/\\/.*)',
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class A4SMEDLParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re='(\\/\\*([^*]|[*\\r\\n])*\\*\\/)|(\\/\\/.*)',
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=False,
        keywords=None,
        namechars='',
        tokenizercls=A4SMEDLBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu()
    def _identifier_list_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._identifier_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _identifier_(self):  # noqa
        self._pattern('[a-zA-Z][A-Za-z0-9_]*')

    @tatsumasu()
    def _type_list_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._type_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('int')
            with self._option():
                self._token('float')
            with self._option():
                self._token('double')
                self._constant('float')
                self.name_last_node('@')
            with self._option():
                self._token('char')
            with self._option():
                self._token('string')
            with self._option():
                self._token('pointer')
            with self._option():
                self._token('opaque')
            self._error('expecting one of: char double float int opaque pointer string')

    @tatsumasu()
    def _start_(self):  # noqa
        self._declaration_()
        self._token(';')

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._import_stmt_()
                    with self._option():
                        self._monitor_decl_()
                    with self._option():
                        self._event_decl_()
                    with self._option():
                        self._syncset_decl_()
                    with self._option():
                        self._connection_defn_()
                    self._error('expecting one of: connection_defn event_decl import_stmt monitor_decl syncset_decl')
            self._token(';')
        self._closure(block0)
        self._check_eof()

    @tatsumasu()
    def _declaration_(self):  # noqa
        self._token('system')
        self._cut()
        self._identifier_()
        self.name_last_node('@')

    @tatsumasu()
    def _import_stmt_(self):  # noqa
        self._token('import')
        self._cut()
        self._smedl_filename_()
        self.name_last_node('@')

    @tatsumasu()
    def _smedl_filename_(self):  # noqa
        self._pattern('"[^"\\n\\r\\v\\f]*"')

    @tatsumasu()
    def _monitor_decl_(self):  # noqa
        self._token('monitor')
        self._cut()
        self._identifier_()
        self.name_last_node('name')
        self._token('(')
        self._type_list_()
        self.name_last_node('params')
        self._token(')')
        with self._optional():
            self._token('as')
            self._identifier_()
            self.name_last_node('renamed')
        self.ast._define(
            ['name', 'params', 'renamed'],
            []
        )

    @tatsumasu()
    def _event_decl_(self):  # noqa
        self._token('event')
        self._cut()
        self._identifier_()
        self.name_last_node('name')
        self._token('(')
        self._type_list_()
        self.name_last_node('params')
        self._token(')')
        self.ast._define(
            ['name', 'params'],
            []
        )

    @tatsumasu()
    def _syncset_decl_(self):  # noqa
        self._token('syncset')
        self._cut()
        self._identifier_()
        self.name_last_node('name')
        self._token('{')
        self._syncset_member_list_()
        self.name_last_node('members')
        self._token('}')
        self.ast._define(
            ['members', 'name'],
            []
        )

    @tatsumasu()
    def _syncset_member_list_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._syncset_member_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _syncset_member_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('event')
                self.name_last_node('kind')
                self._cut()
                self._identifier_()
                self.name_last_node('name')
            with self._option():
                self._constant('monitor')
                self.name_last_node('kind')
                self._identifier_()
                self.name_last_node('name')
            self._error('expecting one of: /[a-zA-Z][A-Za-z0-9_]*/ event identifier')
        self.ast._define(
            ['kind', 'name'],
            []
        )

    @tatsumasu()
    def _connection_defn_(self):  # noqa
        with self._optional():
            self._identifier_()
            self.name_last_node('name')
            self._token(':')
        self._source_spec_()
        self.name_last_node('source')
        self._token('=>')
        self._target_spec_()
        self.name_last_node('target')
        self.ast._define(
            ['name', 'source', 'target'],
            []
        )

    @tatsumasu()
    def _source_spec_(self):  # noqa
        with self._optional():
            self._identifier_()
            self.name_last_node('monitor')
            self._token('.')
        self._identifier_()
        self.name_last_node('event')
        self.ast._define(
            ['event', 'monitor'],
            []
        )

    @tatsumasu()
    def _target_spec_(self):  # noqa
        with self._choice():
            with self._option():
                self._target_event_()
            with self._option():
                self._monitor_initialization_()
            self._error('expecting one of: /[a-zA-Z][A-Za-z0-9_]*/ identifier monitor_initialization target_event')

    @tatsumasu()
    def _target_event_(self):  # noqa
        self._identifier_()
        self.name_last_node('dest_monitor')
        with self._optional():
            self._token('[')
            self._wildcard_parameter_list_()
            self.name_last_node('monitor_params')
            self._token(']')
        self._token('.')
        self._identifier_()
        self.name_last_node('dest_event')
        with self._optional():
            self._token('(')
            self._parameter_list_()
            self.name_last_node('event_params')
            self._token(')')
        self.ast._define(
            ['dest_event', 'dest_monitor', 'event_params', 'monitor_params'],
            []
        )

    @tatsumasu()
    def _monitor_initialization_(self):  # noqa
        self._identifier_()
        self.name_last_node('dest_monitor')
        self._token('(')
        with self._group():
            with self._choice():
                with self._option():
                    self._parameter_list_nonempty_()
                    self.name_last_node('monitor_params')
                    with self._optional():
                        self._token(',')
                        self._initializer_list_nonempty_()
                        self.name_last_node('state_vars')
                with self._option():
                    self._initializer_list_()
                    self.name_last_node('state_vars')
                self._error('expecting one of: initializer_list parameter_list_nonempty')
        self._token(')')
        self.ast._define(
            ['dest_monitor', 'monitor_params', 'state_vars'],
            []
        )

    @tatsumasu()
    def _initializer_list_nonempty_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._initializer_()
        self._positive_gather(block0, sep0)

    @tatsumasu()
    def _initializer_list_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._initializer_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _initializer_(self):  # noqa
        self._identifier_()
        self.name_last_node('var_name')
        self._token('=')
        self._parameter_()
        self.name_last_node('value')
        self.ast._define(
            ['value', 'var_name'],
            []
        )

    @tatsumasu()
    def _wildcard_parameter_list_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._wildcard_parameter_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _parameter_list_nonempty_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._parameter_()
        self._positive_gather(block0, sep0)

    @tatsumasu()
    def _parameter_list_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._parameter_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _wildcard_parameter_(self):  # noqa
        with self._choice():
            with self._option():
                self._parameter_()
                self.name_last_node('@')
            with self._option():
                self._token('*')
                self.name_last_node('kind')
            self._error('expecting one of: # $ * Id Param parameter')
        self.ast._define(
            ['kind'],
            []
        )

    @tatsumasu()
    def _parameter_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('#')
                self.name_last_node('kind')
                self._natural_()
                self.name_last_node('index')
            with self._option():
                self._token('Id')
                self._constant('#')
                self.name_last_node('kind')
                self._token('.')
                self._natural_()
                self.name_last_node('index')
            with self._option():
                self._token('$')
                self.name_last_node('kind')
                self._natural_()
                self.name_last_node('index')
            with self._option():
                self._token('Param')
                self._constant('$')
                self.name_last_node('kind')
                self._token('.')
                self._natural_()
                self.name_last_node('index')
            self._error('expecting one of: # $ Id Param')
        self.ast._define(
            ['index', 'kind'],
            []
        )

    @tatsumasu()
    def _natural_(self):  # noqa
        self._pattern('[0-9]+')


class A4SMEDLSemantics(object):
    def identifier_list(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast

    def type_list(self, ast):  # noqa
        return ast

    def type(self, ast):  # noqa
        return ast

    def start(self, ast):  # noqa
        return ast

    def declaration(self, ast):  # noqa
        return ast

    def import_stmt(self, ast):  # noqa
        return ast

    def smedl_filename(self, ast):  # noqa
        return ast

    def monitor_decl(self, ast):  # noqa
        return ast

    def event_decl(self, ast):  # noqa
        return ast

    def syncset_decl(self, ast):  # noqa
        return ast

    def syncset_member_list(self, ast):  # noqa
        return ast

    def syncset_member(self, ast):  # noqa
        return ast

    def connection_defn(self, ast):  # noqa
        return ast

    def source_spec(self, ast):  # noqa
        return ast

    def target_spec(self, ast):  # noqa
        return ast

    def target_event(self, ast):  # noqa
        return ast

    def monitor_initialization(self, ast):  # noqa
        return ast

    def initializer_list_nonempty(self, ast):  # noqa
        return ast

    def initializer_list(self, ast):  # noqa
        return ast

    def initializer(self, ast):  # noqa
        return ast

    def wildcard_parameter_list(self, ast):  # noqa
        return ast

    def parameter_list_nonempty(self, ast):  # noqa
        return ast

    def parameter_list(self, ast):  # noqa
        return ast

    def wildcard_parameter(self, ast):  # noqa
        return ast

    def parameter(self, ast):  # noqa
        return ast

    def natural(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'identifier_list'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = A4SMEDLParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, A4SMEDLParser, name='A4SMEDL')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
