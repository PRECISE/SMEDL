#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import print_function, division, absolute_import, unicode_literals

from grako.model import Node
from grako.model import ModelBuilderSemantics


__version__ = '2016.07.13.17'


class smedlModelBuilderSemantics(ModelBuilderSemantics):
    def __init__(self):
        types = [
            t for t in globals().values()
            if type(t) is type and issubclass(t, ModelBase)
        ]
        super(smedlModelBuilderSemantics, self).__init__(types=types)


class ModelBase(Node):
    pass


class Object(ModelBase):
    def __init__(self, *args, 
                 imports=None,
                 name=None,
                 identities=None,
                 states=None,
                 internal_events=None,
                 exported_events=None,
                 imported_events=None,
                 scenarios=None,
                 **kwargs):
        super(Object, self).__init__(
            *args,
            imports=imports,
            name=name,
            identities=identities,
            states=states,
            internal_events=internal_events,
            exported_events=exported_events,
            imported_events=imported_events,
            scenarios=scenarios,
            **kwargs
        )


class VariableDeclaration(ModelBase):
    def __init__(self, *args, 
                 type=None,
                 var=None,
                 **kwargs):
        super(VariableDeclaration, self).__init__(
            *args,
            type=type,
            var=var,
            **kwargs
        )


class Event(ModelBase):
    def __init__(self, *args, 
                 error=None,
                 id=None,
                 params=None,
                 definition=None,
                 **kwargs):
        super(Event, self).__init__(
            *args,
            error=error,
            id=id,
            params=params,
            definition=definition,
            **kwargs
        )


class Scenario(ModelBase):
    def __init__(self, *args, 
                 atomic=None,
                 id=None,
                 traces=None,
                 **kwargs):
        super(Scenario, self).__init__(
            *args,
            atomic=atomic,
            id=id,
            traces=traces,
            **kwargs
        )


class Trace(ModelBase):
    def __init__(self, *args, 
                 start_state=None,
                 steps=None,
                 end_state=None,
                 else_actions=None,
                 else_state=None,
                 **kwargs):
        super(Trace, self).__init__(
            *args,
            start_state=start_state,
            steps=steps,
            end_state=end_state,
            else_actions=else_actions,
            else_state=else_state,
            **kwargs
        )


class Step(ModelBase):
    def __init__(self, *args, 
                 event=None,
                 actions=None,
                 **kwargs):
        super(Step, self).__init__(
            *args,
            event=event,
            actions=actions,
            **kwargs
        )


class EventInstance(ModelBase):
    def __init__(self, *args, 
                 expression=None,
                 when=None,
                 **kwargs):
        super(EventInstance, self).__init__(
            *args,
            expression=expression,
            when=when,
            **kwargs
        )


class Action(ModelBase):
    def __init__(self, *args, 
                 state_update=None,
                 raise_=None,
                 instantiation=None,
                 call=None,
                 **kwargs):
        super(Action, self).__init__(
            *args,
            state_update=state_update,
            raise_=raise_,
            instantiation=instantiation,
            call=call,
            **kwargs
        )


class StateUpdateStatement(ModelBase):
    def __init__(self, *args, 
                 target=None,
                 operator=None,
                 expression=None,
                 **kwargs):
        super(StateUpdateStatement, self).__init__(
            *args,
            target=target,
            operator=operator,
            expression=expression,
            **kwargs
        )


class RaiseStatement(ModelBase):
    def __init__(self, *args, 
                 id=None,
                 expr_list=None,
                 **kwargs):
        super(RaiseStatement, self).__init__(
            *args,
            id=id,
            expr_list=expr_list,
            **kwargs
        )


class InstantiationStatement(ModelBase):
    def __init__(self, *args, 
                 id=None,
                 state_update_list=None,
                 **kwargs):
        super(InstantiationStatement, self).__init__(
            *args,
            id=id,
            state_update_list=state_update_list,
            **kwargs
        )


class CallStatement(ModelBase):
    def __init__(self, *args, 
                 target=None,
                 expr_list=None,
                 **kwargs):
        super(CallStatement, self).__init__(
            *args,
            target=target,
            expr_list=expr_list,
            **kwargs
        )


class Expression(ModelBase):
    def __init__(self, *args, 
                 or_ex=None,
                 **kwargs):
        super(Expression, self).__init__(
            *args,
            or_ex=or_ex,
            **kwargs
        )