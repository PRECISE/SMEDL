object Explorer
identity
  opaque id;
state
  int x, y, heading, interest_threshold;
events
  imported view(int, int), drive(int, int, int), turn(int);
  internal found();
  exported retrieved();
scenarios
  main:
    Explore -> found() -> Retrieve
    Retrieve -> retrieved() -> Explore
  explore:
    Look -> view(x, y) when contains_object(x, y) { raise found() } -> Move
      else -> Move
    Move -> turn(facing) when facing != this.heading -> Look
      else -> Move
    Move -> drive(x, y, heading) when x == this.x && y == this.y { raise retrieved() } -> Look
      else -> Look

  // Add check that it doesn't go off the map
  // We can delay events...
  // Do higher-level state switches need to make other checkers aware of their transition to allow them to change their behavior

  /*
  mud:
    Drive -> "slow down" -> Drive
  ice:
    Drive -> "slower turns" -> Drive
  turn:
    Drive -> "perform turn" -> Drive
  climb:
    Drive -> "slow down" -> Drive
  obstacle:
    Drive -> turn() -> drive() -> Drive
  hill:
    Drive -> "prepare to climb" -> Drive
  */
