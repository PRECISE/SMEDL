object RateComputation
    identity
	int id;
    state
        float  lastTime;
        float curTime;
        float sum;

	// ???? change name to string, initialize on cmd line, and use to match against incoming raw monitored data
	string name;
	float rate;

	

    events
        imported dataUpdate(string, float, float);

        imported timeout();
        imported end();
        exported dataUpdate2(string, float, float);


    scenarios  
        computation: 	
                Init -> timeout() -> Init
                Init -> end() -> End
                ComputeRate -> end() -> End
                Init -> dataUpdate(metric, ts, val) when (compare(metric,name)) { sum = val; curTime = ts; lastTime = ts; } -> ComputeRate
                ComputeRate -> dataUpdate(metric, ts, val) when (compare(metric,name)) { sum = sum + val; curTime = ts; } -> ComputeRate


                ComputeRate -> timeout() when ((curTime - lastTime) > 0) { rate = sum/(curTime-lastTime); raise dataUpdate2(name, curTime, rate); sum = 0; lastTime = curTime; } -> ComputeRate
                            else -> ComputeRate
		





