object Explorer
identity
  opaque id;
state
  int mon_x, mon_y, mon_heading,move_count,count,sum,targetNum;
events
  imported view(pointer), drive(int, int, int, pointer), turn(int),count_move();
  internal found(), retrieved(int),reachNum();
  exported output(float);
scenarios
  main:
    Explore -> found() -> Retrieve
    Retrieve -> retrieved(cnt) -> Explore
  explore:
    Look -> view(view_pointer) when contains_object(view_pointer) { raise found() } -> Move
      else -> Move
    Move -> turn(facing) when facing != mon_heading {mon_heading = facing } -> Look
      else -> Move
    Move -> drive(x, y, heading, map) when check_retrieved(map,x,y) { raise retrieved(move_count); mon_x = x; mon_y = y; move_count = 0 } -> Look
      else {mon_x = x; mon_y = y} -> Look
  count:
    Start -> count_move(){move_count = move_count + 1} -> Start

  stat:
    Start -> retrieved(move_count) 
              {sum=sum+1;count=count+move_count;raise reachNum()}-> Start
  check:
        CheckSum -> reachNum() when (sum < targetNum) -> CheckSum
                    else {raise output(count/sum);sum=0;count=0} -> CheckSum
