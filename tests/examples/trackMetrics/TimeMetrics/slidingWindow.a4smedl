System SlidingWindow :=

Async frontend()
{
imported newDetection(float, float, float, float, float);
imported track(float, string, int, float, float, float, float, float, float);
exported hb_out();
exported track_out(float, string, int, float, float, float, float, float, float, float, int);
}

Async windowManager(int)
{
imported creation track(float, string, int, float, float, float, float, float, float, float, int);
imported heartbeat();
exported subCreation(int, float, int, int);
exported trackOut(float, float, float, float, float, float, float);
exported createDS(float, int, int, int);
exported createWindowDec(float, float, float);
exported heartbeatOut(int);
exported addTrack(int);
}

Async subwindow(int, int)
{
imported creation createSub(int, float, int, int);
imported heartbeat(int);
imported trackOut(float, float, float, float, float, float, float);
exported sub_metric(int, float, float, int);
}

Async outEventDetection(int)
{
imported createSub(float, float, float);
imported heartbeat(int);//delete flag
imported trackOut(float, int, float, float, float, float, float, float);
exported alarm(int);//-1, smaller than least bound, 1, larger than largest bound
}

Async windowDownStream(int)
{
	
	imported creation initial(float, int, int, int, int);//initialization of buffer
	imported metric_sub(int, float, float, int);
	
	exported overall_metric(int, float, int);
}

Async metrics()
{
imported addTrack(int);
imported metric( int, float, int);
exported metric_avg(float,float,int);
}

ch2: newDetection => frontend.newDetection
ch7: track => frontend.track
ch6: frontend.track_out => windowManager.track {windowManager[0]=track_out[2]}
ch3: frontend.hb_out => windowManager.heartbeat
ch4: windowManager.heartbeatOut => subwindow.heartbeat {subwindow[0]=windowManager[0]}
ch4: windowManager.heartbeatOut => outEventDetection.heartbeat {outEventDetection[0]=windowManager[0]}
ch5: subwindow.sub_metric => windowDownStream.metric_sub {windowDownStream[0] = subwindow[0]}
ch10: windowManager.trackOut => subwindow.track{subwindow[0]=windowManager[0]}
ch10: windowManager.trackOut => outEventDetection.track{outEventDetection[0]=windowManager[0]}
ch8: windowManager.subCreation => subwindow.createSub {subwindow[0] = windowManager[0]; subwindow[1] = subCreation[0]}
ch9: windowManager.createDS => windowDownStream.initial {windowDownStream[0] = windowManager[0]}
ch13: windowManager.createWindowDec => outEventDetection.createSub {outEventDetection[0] = windowManager[0]}
ch11: windowDownStream.overall_metric => metrics.metric 
ch12: windowManager.addTrack => metrics.addTrack 
