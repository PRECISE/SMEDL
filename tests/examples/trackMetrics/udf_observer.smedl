
#import detectionDb
#import helper

// Unassociated Detection Filter

object udf_observer
        state
	// duration of metric computation
	float interval = 30000.0;
	// interval between reports
	float slidingWindowInterval = 5000;
	// delay time to allow track updates after the metric interval
	float delay = 10000;
	
	// time of end of last period reported
	float lastTime;
	int timerEnabled;


	double timePerTrack;
        double intervalTimeThreshold =  15;



        

	
    events
        // NO UNUSED EVENTS!
       	imported newDetection(float, float, float, float);
       	imported trackReport(float, string, int, float, float, float);
	internal timestamp(float);
       	internal storeDetection(float, float, float, float);
	internal doMetrics(float);
        internal avgIntervalTrackTime(double);
	exported trackIntervalTimeMetric(double);

    scenarios
    
	inputDetections:
	  Start -> newDetection(ts, lat, lon, alt, snr)
	  	{ raise timestamp(ts); raise storeDetection( (ts), lat, lon, alt, snr); } -> Start

        detections:
	  Start -> storeDetection(ts, lat, lon, alt, snr)
	  	{ addDetection( (ts/1000), lat, lon, alt, snr);  } -> Start
	  		  
	outputTrack:
	  Start -> trackReport(ts, reportType, trackid, lat, lon, alt, vlat, vlon, valt) when (!compare(reportType, "COAST"))
	  	{ removeDetection(ts, lat, lon, alt);
		  addReport(ts, trackid, lat, lon, alt, vlat, vlon, valt, monitor);
		  raise trackAcceleration(accTs, accTrackId, accAccel, accAz, accEl);
		  } -> Start
		
	timekeeper:
	  Idle -> timestamp(ts) when (lastTime == 0) { lastTime = ts;  printf("INIT TIMER\n");  } -> Start
	  Start -> timestamp(ts) when (ts > lastTime + interval + delay) { timerEnabled = 1; raise doMetrics(ts); } -> Enabled
	  Enabled -> timestamp(ts) when ((ts > lastTime + slidingWindowInterval) && timerEnabled)  { raise doMetrics(ts); } -> Enabled

	metricComputation:
	  Enabled -> doMetrics(ts)
	  { 
	    /*fire!*/
	    printf("TIMER %f\n", ts);
	    /* report #unassociated - probably need to wait until tracks get processed? */
	    /* report track metrics */
	    reportTrackMetrics(ts, 1, monitor /*interval*/);
	    raise avgIntervalTrackTime(timePerTrack);


	 	    /* clear detection list */
	    clearDetections();
	    lastTime = lastTime + slidingWindowInterval;

	   
	  } -> Enabled

thresholdDetection:

	  Start -> avgIntervalTrackTime(trackTime)     when ( (trackTime > 0) && (trackTime < intervalTimeThreshold) )
	  	{ printf("TrackObserveTime = %f \n", 1000*trackTime/interval); raise trackIntervalTimeMetric(1000*trackTime/interval); } -> Start
	  Start -> avgIntervalTrackTime(trackTime)     when (!( (trackTime > 0) && (trackTime < intervalTimeThreshold) ))
	  	{ printf("TrackObserveTime = %f \n", 1000*trackTime/interval); raise trackIntervalTimeMetric(1000*trackTime/interval); } -> Start




	

	
