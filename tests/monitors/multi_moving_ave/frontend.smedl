object Frontend;

state:
    int numObjects = 0;
    int measurementsSinceGather = 0;
    int numResponses;
    int numAlarms = 0;

events:
    imported newObject();
    imported newMeasurement();
    internal checkMeasurementCount();
    exported requestAverages();
    imported averageResponse(float);
    internal checkAlarms();
    exported raiseAlarm();
    exported resetAlarm();

scenarios:
    countObjects:
        idle
            -> newObject() {numObjects++;}
            -> idle;

    countMeasurements:
        idle
            -> newMeasurement() {
                measurementsSinceGather++;
                raise checkMeasurementCount();
            }
            -> idle;

    gatherAverages:
        /* If we assume incoming measurements are distributed roughly evenly
           among the objects, then when there have been numObjects measurements
           since the last gather, roughly every object will have had another
           measurement */
        idle
            -> checkMeasurementCount()
                when (measurementsSinceGather >= numObjects) {
                    measurementsSinceGather = 0;
                    numResponses = 1;
                    numAlarms = 0;
                    raise requestAverages();
            }
            -> awaiting_responses
            else
            -> idle;
        awaiting_responses
            -> averageResponse(average) when (
                    numResponses < numObjects && average > 10.0) {
                numAlarms++;
                numResponses++;
            }
            -> awaiting_responses;
        awaiting_responses
            -> averageResponse(average) when (
                    numResponses == numObjects && average > 10.0) {
                numAlarms++;
                raise checkAlarms();
            }
            -> idle;
        awaiting_responses
            -> averageResponse(average) when (
                    numResponses < numObjects && average <= 10.0) {
                numResponses++;
            }
            -> awaiting_responses;
        awaiting_responses
            -> averageResponse(average) when (
                    numResponses == numObjects && average <= 10.0) {
                raise checkAlarms();
            }
            -> idle;
        /* If the measurement that triggered the request created a new
           monitor, we can end up with one more response than expected. */
        idle
            -> averageResponse(average)
            -> idle;

    handleAlarms:
        /* Alarm if at least half the averages are out of spec */
        no_alarm
            -> checkAlarms() when (numAlarms < (numObjects + 1) / 2)
            -> no_alarm;
        no_alarm
            -> checkAlarms() when (numAlarms >= (numObjects + 1) / 2) {
                raise raiseAlarm();
            }
            -> yes_alarm;
        yes_alarm
            -> checkAlarms() when (numAlarms < (numObjects + 1) / 2) {
                raise resetAlarm();
            }
            -> no_alarm;
        yes_alarm
            -> checkAlarms() when (numAlarms >= (numObjects + 1) / 2)
            -> yes_alarm;
